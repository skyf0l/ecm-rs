/* automatically generated by rust-bindgen 0.59.1 */

pub const ECM_VERSION: &'static [u8; 6usize] = b"7.0.4\0";
pub const ECM_EC_TYPE_MONTGOMERY: u32 = 1;
pub const ECM_EC_TYPE_WEIERSTRASS: u32 = 2;
pub const ECM_EC_TYPE_HESSIAN: u32 = 3;
pub const ECM_EC_TYPE_WEIERSTRASS_COMPLETE: u32 = 4;
pub const ECM_LAW_AFFINE: u32 = 1;
pub const ECM_LAW_HOMOGENEOUS: u32 = 2;
pub const ECM_MOD_NOBASE2: i32 = -1;
pub const ECM_MOD_DEFAULT: u32 = 0;
pub const ECM_MOD_MPZ: u32 = 1;
pub const ECM_MOD_BASE2: u32 = 2;
pub const ECM_MOD_MODMULN: u32 = 3;
pub const ECM_MOD_REDC: u32 = 4;
pub const ECM_ECM: u32 = 0;
pub const ECM_PM1: u32 = 1;
pub const ECM_PP1: u32 = 2;
pub const ECM_FACTOR_FOUND_STEP1: u32 = 1;
pub const ECM_FACTOR_FOUND_STEP2: u32 = 2;
pub const ECM_NO_FACTOR_FOUND: u32 = 0;
pub const ECM_ERROR: i32 = -1;
pub const ECM_DEFAULT_B1_DONE: f64 = 1.0;
pub const ECM_PARAM_DEFAULT: i32 = -1;
pub const ECM_PARAM_SUYAMA: u32 = 0;
pub const ECM_PARAM_BATCH_SQUARE: u32 = 1;
pub const ECM_PARAM_BATCH_2: u32 = 2;
pub const ECM_PARAM_BATCH_32BITS_D: u32 = 3;
pub const ECM_PARAM_WEIERSTRASS: u32 = 5;
pub const ECM_PARAM_HESSIAN: u32 = 6;
pub const ECM_PARAM_TORSION: u32 = 7;
pub const ECM_DEFAULT_B2: i32 = -1;
pub const ECM_DEFAULT_K: u32 = 0;
pub const ECM_DEFAULT_S: u32 = 0;
pub type size_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type mp_limb_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mpz_struct {
    pub _mp_alloc: ::std::os::raw::c_int,
    pub _mp_size: ::std::os::raw::c_int,
    pub _mp_d: *mut mp_limb_t,
}
#[test]
fn bindgen_test_layout___mpz_struct() {
    assert_eq!(
        ::std::mem::size_of::<__mpz_struct>(),
        16usize,
        concat!("Size of: ", stringify!(__mpz_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__mpz_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpz_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpz_struct>()))._mp_alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpz_struct>()))._mp_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpz_struct>()))._mp_d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_d)
        )
    );
}
pub type mpz_t = [__mpz_struct; 1usize];
pub const gmp_randalg_t_GMP_RAND_ALG_DEFAULT: gmp_randalg_t = 0;
pub const gmp_randalg_t_GMP_RAND_ALG_LC: gmp_randalg_t = 0;
pub type gmp_randalg_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gmp_randstate_struct {
    pub _mp_seed: mpz_t,
    pub _mp_alg: gmp_randalg_t,
    pub _mp_algdata: __gmp_randstate_struct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __gmp_randstate_struct__bindgen_ty_1 {
    pub _mp_lc: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___gmp_randstate_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__gmp_randstate_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__gmp_randstate_struct__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gmp_randstate_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__gmp_randstate_struct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__gmp_randstate_struct__bindgen_ty_1>()))._mp_lc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct__bindgen_ty_1),
            "::",
            stringify!(_mp_lc)
        )
    );
}
#[test]
fn bindgen_test_layout___gmp_randstate_struct() {
    assert_eq!(
        ::std::mem::size_of::<__gmp_randstate_struct>(),
        32usize,
        concat!("Size of: ", stringify!(__gmp_randstate_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__gmp_randstate_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__gmp_randstate_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__gmp_randstate_struct>()))._mp_seed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct),
            "::",
            stringify!(_mp_seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__gmp_randstate_struct>()))._mp_alg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct),
            "::",
            stringify!(_mp_alg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__gmp_randstate_struct>()))._mp_algdata as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct),
            "::",
            stringify!(_mp_algdata)
        )
    );
}
pub type gmp_randstate_t = [__gmp_randstate_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ell_curve_struct {
    pub type_: ::std::os::raw::c_int,
    pub law: ::std::os::raw::c_int,
    pub a4: mpz_t,
    pub a1: mpz_t,
    pub a3: mpz_t,
    pub a2: mpz_t,
    pub a6: mpz_t,
    pub buf: [mpz_t; 9usize],
    pub disc: ::std::os::raw::c_int,
    pub sq: [mpz_t; 10usize],
}
#[test]
fn bindgen_test_layout___ell_curve_struct() {
    assert_eq!(
        ::std::mem::size_of::<__ell_curve_struct>(),
        400usize,
        concat!("Size of: ", stringify!(__ell_curve_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__ell_curve_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__ell_curve_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).law as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(law)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).a4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(a4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).a1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).a3 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(a3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).a2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).a6 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(a6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).buf as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).disc as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(disc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ell_curve_struct>())).sq as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(__ell_curve_struct),
            "::",
            stringify!(sq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __ecm_param_struct {
    pub method: ::std::os::raw::c_int,
    pub x: mpz_t,
    pub y: mpz_t,
    pub param: ::std::os::raw::c_int,
    pub sigma: mpz_t,
    pub sigma_is_A: ::std::os::raw::c_int,
    pub E: *mut __ell_curve_struct,
    pub go: mpz_t,
    pub B1done: f64,
    pub B2min: mpz_t,
    pub B2: mpz_t,
    pub k: ::std::os::raw::c_ulong,
    pub S: ::std::os::raw::c_int,
    pub repr: ::std::os::raw::c_int,
    pub nobase2step2: ::std::os::raw::c_int,
    pub verbose: ::std::os::raw::c_int,
    pub os: *mut FILE,
    pub es: *mut FILE,
    pub chkfilename: *mut ::std::os::raw::c_char,
    pub TreeFilename: *mut ::std::os::raw::c_char,
    pub maxmem: f64,
    pub stage1time: f64,
    pub rng: gmp_randstate_t,
    pub use_ntt: ::std::os::raw::c_int,
    pub stop_asap: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub batch_s: mpz_t,
    pub batch_last_B1_used: f64,
    pub gpu: ::std::os::raw::c_int,
    pub gpu_device: ::std::os::raw::c_int,
    pub gpu_device_init: ::std::os::raw::c_int,
    pub gpu_number_of_curves: ::std::os::raw::c_uint,
    pub gw_k: f64,
    pub gw_b: ::std::os::raw::c_ulong,
    pub gw_n: ::std::os::raw::c_ulong,
    pub gw_c: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout___ecm_param_struct() {
    assert_eq!(
        ::std::mem::size_of::<__ecm_param_struct>(),
        328usize,
        concat!("Size of: ", stringify!(__ecm_param_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__ecm_param_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__ecm_param_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).y as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).param as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).sigma as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(sigma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).sigma_is_A as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(sigma_is_A)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).E as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).go as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(go)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).B1done as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(B1done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).B2min as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(B2min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).B2 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(B2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).k as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).S as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).repr as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(repr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).nobase2step2 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(nobase2step2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).verbose as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).os as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).es as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).chkfilename as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(chkfilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).TreeFilename as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(TreeFilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).maxmem as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(maxmem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).stage1time as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(stage1time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).rng as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(rng)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).use_ntt as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(use_ntt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).stop_asap as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(stop_asap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).batch_s as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(batch_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ecm_param_struct>())).batch_last_B1_used as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(batch_last_B1_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).gpu as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).gpu_device as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(gpu_device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ecm_param_struct>())).gpu_device_init as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(gpu_device_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ecm_param_struct>())).gpu_number_of_curves as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(gpu_number_of_curves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).gw_k as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(gw_k)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).gw_b as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(gw_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).gw_n as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(gw_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ecm_param_struct>())).gw_c as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(__ecm_param_struct),
            "::",
            stringify!(gw_c)
        )
    );
}
pub type ecm_params = [__ecm_param_struct; 1usize];
extern "C" {
    pub fn ecm_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecm_factor(
        arg1: *mut __mpz_struct,
        arg2: *mut __mpz_struct,
        arg3: f64,
        arg4: *mut __ecm_param_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecm_init(arg1: *mut __ecm_param_struct);
}
extern "C" {
    pub fn ecm_clear(arg1: *mut __ecm_param_struct);
}
