name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  RUST_BACKTRACE: 1

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
    - name: Stable toolchain with rustfmt
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - uses: swatinem/rust-cache@v2

    - name: Check coding style
      run: cargo fmt --check --all

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
    - name: Stable toolchain with clippy
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - uses: swatinem/rust-cache@v2

    - name: Lint
      run: cargo clippy --all-targets  --all-features -- -D warnings

  docs:
    name: Docs
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      RUSTDOCFLAGS: "-Dwarnings"

    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: swatinem/rust-cache@v2

    - run: cargo doc --no-deps

  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: swatinem/rust-cache@v2
    - uses: taiki-e/install-action@cargo-nextest

    - name: Test
      run: cargo nextest run --all-features

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - uses: swatinem/rust-cache@v2
    - uses: taiki-e/install-action@cargo-nextest
    - uses: taiki-e/install-action@cargo-llvm-cov

    - name: Tests
      run: cargo llvm-cov nextest --lcov --output-path lcov.info --all-features

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        flags: rust
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: swatinem/rust-cache@v2

    # msys2 required by rug on windows
    - name: Setup msys2 (windows)
      uses: msys2/setup-msys2@v2
      if: matrix.os == 'windows-latest'
      with:
        install: base-devel pacman-mirrors diffutils m4 make openssl openssl-devel
        pacboy: gcc:p rust:p

    # Only for windows
    - name: Msys2 build (windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        cargo build

    - name: Build
      if: matrix.os != 'windows-latest'
      run: cargo build

  publish:
    name: Publish
    runs-on: ubuntu-latest
    timeout-minutes: 30

    needs: [fmt, clippy, docs, tests, build]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - uses: dtolnay/rust-toolchain@stable

    - run: cargo publish --token ${CRATES_TOKEN}
      env:
        CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}
